# coding: utf-8

"""
    MediaStore API

    MediaStore API for MediaStore  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ProductsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def products_get(self, **kwargs):  # noqa: E501
        """Gets a list of all the product Ids the user can view.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MediaStoreAPIFeaturesProductsFeatureProductIdListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.products_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def products_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets a list of all the product Ids the user can view.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MediaStoreAPIFeaturesProductsFeatureProductIdListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediaStoreAPIFeaturesProductsFeatureProductIdListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_getmodifiedgtins_get(self, **kwargs):  # noqa: E501
        """Gets a list of gtins that has been modified on given date.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_getmodifiedgtins_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _date: Format: YYYY-MM-DD. Default value: today
        :return: MediaStoreAPIFeaturesProductsFeatureProductIdListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_getmodifiedgtins_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.products_getmodifiedgtins_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def products_getmodifiedgtins_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets a list of gtins that has been modified on given date.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_getmodifiedgtins_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _date: Format: YYYY-MM-DD. Default value: today
        :return: MediaStoreAPIFeaturesProductsFeatureProductIdListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_getmodifiedgtins_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/getmodifiedgtins', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediaStoreAPIFeaturesProductsFeatureProductIdListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_id_angle_get(self, id, angle, **kwargs):  # noqa: E501
        """Gets the metadata available for a single image  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/{angle}</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_angle_get(id, angle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :param str angle: Valid angles: 1L, 1C, 1R, 1N, 2N, 3N, 7N, 8N, 9N (required)
        :param int variant: Variant number. Default value: 0
        :param datetime specific_date: Return result as they would be on a specific date. Format: YYYY-MM-DD. Default value: today
        :param bool in_sales: Return products that are currently in sales only. Default value: false
        :param bool original_only: Return original images only, ignore campaign images. Default value: false
        :param str mediatype: Valid types are A for image and G for graphic illustration. Default are all mediatypes.
        :return: MediaStoreAPIFeaturesProductsFeatureImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_id_angle_get_with_http_info(id, angle, **kwargs)  # noqa: E501
        else:
            (data) = self.products_id_angle_get_with_http_info(id, angle, **kwargs)  # noqa: E501
            return data

    def products_id_angle_get_with_http_info(self, id, angle, **kwargs):  # noqa: E501
        """Gets the metadata available for a single image  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/{angle}</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_angle_get_with_http_info(id, angle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :param str angle: Valid angles: 1L, 1C, 1R, 1N, 2N, 3N, 7N, 8N, 9N (required)
        :param int variant: Variant number. Default value: 0
        :param datetime specific_date: Return result as they would be on a specific date. Format: YYYY-MM-DD. Default value: today
        :param bool in_sales: Return products that are currently in sales only. Default value: false
        :param bool original_only: Return original images only, ignore campaign images. Default value: false
        :param str mediatype: Valid types are A for image and G for graphic illustration. Default are all mediatypes.
        :return: MediaStoreAPIFeaturesProductsFeatureImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'angle', 'variant', 'specific_date', 'in_sales', 'original_only', 'mediatype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_id_angle_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_id_angle_get`")  # noqa: E501
        # verify the required parameter 'angle' is set
        if ('angle' not in params or
                params['angle'] is None):
            raise ValueError("Missing the required parameter `angle` when calling `products_id_angle_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'angle' in params:
            path_params['angle'] = params['angle']  # noqa: E501

        query_params = []
        if 'variant' in params:
            query_params.append(('variant', params['variant']))  # noqa: E501
        if 'specific_date' in params:
            query_params.append(('specificDate', params['specific_date']))  # noqa: E501
        if 'in_sales' in params:
            query_params.append(('inSales', params['in_sales']))  # noqa: E501
        if 'original_only' in params:
            query_params.append(('originalOnly', params['original_only']))  # noqa: E501
        if 'mediatype' in params:
            query_params.append(('mediatype', params['mediatype']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/{angle}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediaStoreAPIFeaturesProductsFeatureImageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_id_angle_image_get(self, id, angle, **kwargs):  # noqa: E501
        """Gets the binary file for a single image  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/{angle}/image</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_angle_image_get(id, angle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :param str angle: Valid angles: 1L, 1C, 1R, 1N, 2N, 3N, 7N, 8N, 9N (required)
        :param int variant: Variant number. Default value: 0
        :param datetime specific_date: Return result as they would be on a specific date. Format: YYYY-MM-DD. Default value: today
        :param bool in_sales: Return products that are currently in sales only. Default value: false
        :param bool original_only: Return original images only, ignore campaign images. Default value: false
        :param str size: Valid sizes are: 100, 188, 376, 752, 2000, 2400, 3000, \"original\", \"originalJPG\" og \"originalPNG\". Default value: 752.                original is a .tif file with clipping path and without background.               originalJPG is with clipping path and with background.               originalPNG is without clipping path and without background.
        :param str mediatype: Valid types are A for image and G for graphic illustration. Default are all mediatypes.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_id_angle_image_get_with_http_info(id, angle, **kwargs)  # noqa: E501
        else:
            (data) = self.products_id_angle_image_get_with_http_info(id, angle, **kwargs)  # noqa: E501
            return data

    def products_id_angle_image_get_with_http_info(self, id, angle, **kwargs):  # noqa: E501
        """Gets the binary file for a single image  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/{angle}/image</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_angle_image_get_with_http_info(id, angle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :param str angle: Valid angles: 1L, 1C, 1R, 1N, 2N, 3N, 7N, 8N, 9N (required)
        :param int variant: Variant number. Default value: 0
        :param datetime specific_date: Return result as they would be on a specific date. Format: YYYY-MM-DD. Default value: today
        :param bool in_sales: Return products that are currently in sales only. Default value: false
        :param bool original_only: Return original images only, ignore campaign images. Default value: false
        :param str size: Valid sizes are: 100, 188, 376, 752, 2000, 2400, 3000, \"original\", \"originalJPG\" og \"originalPNG\". Default value: 752.                original is a .tif file with clipping path and without background.               originalJPG is with clipping path and with background.               originalPNG is without clipping path and without background.
        :param str mediatype: Valid types are A for image and G for graphic illustration. Default are all mediatypes.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'angle', 'variant', 'specific_date', 'in_sales', 'original_only', 'size', 'mediatype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_id_angle_image_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_id_angle_image_get`")  # noqa: E501
        # verify the required parameter 'angle' is set
        if ('angle' not in params or
                params['angle'] is None):
            raise ValueError("Missing the required parameter `angle` when calling `products_id_angle_image_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'angle' in params:
            path_params['angle'] = params['angle']  # noqa: E501

        query_params = []
        if 'variant' in params:
            query_params.append(('variant', params['variant']))  # noqa: E501
        if 'specific_date' in params:
            query_params.append(('specificDate', params['specific_date']))  # noqa: E501
        if 'in_sales' in params:
            query_params.append(('inSales', params['in_sales']))  # noqa: E501
        if 'original_only' in params:
            query_params.append(('originalOnly', params['original_only']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'mediatype' in params:
            query_params.append(('mediatype', params['mediatype']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/{angle}/image', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_id_badge_angle_get(self, id, angle, **kwargs):  # noqa: E501
        """Gets the metadata available for a single badge image (Method is not supported anymore)  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/{angle}</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_badge_angle_get(id, angle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :param str angle: Valid angles: 1LZ, 1CZ, 1RZ (required)
        :param int variant: Variant number. Default value: 0
        :param datetime specific_date: Return result as they would be on a specific date. Format: YYYY-MM-DD. Default value: today
        :param bool in_sales: Return products that are currently in sales only. Default value: false
        :param str mediatype: Valid types are A for image and G for graphic illustration. Default are all mediatypes.
        :return: MediaStoreAPIFeaturesProductsFeatureImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_id_badge_angle_get_with_http_info(id, angle, **kwargs)  # noqa: E501
        else:
            (data) = self.products_id_badge_angle_get_with_http_info(id, angle, **kwargs)  # noqa: E501
            return data

    def products_id_badge_angle_get_with_http_info(self, id, angle, **kwargs):  # noqa: E501
        """Gets the metadata available for a single badge image (Method is not supported anymore)  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/{angle}</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_badge_angle_get_with_http_info(id, angle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :param str angle: Valid angles: 1LZ, 1CZ, 1RZ (required)
        :param int variant: Variant number. Default value: 0
        :param datetime specific_date: Return result as they would be on a specific date. Format: YYYY-MM-DD. Default value: today
        :param bool in_sales: Return products that are currently in sales only. Default value: false
        :param str mediatype: Valid types are A for image and G for graphic illustration. Default are all mediatypes.
        :return: MediaStoreAPIFeaturesProductsFeatureImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'angle', 'variant', 'specific_date', 'in_sales', 'mediatype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_id_badge_angle_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_id_badge_angle_get`")  # noqa: E501
        # verify the required parameter 'angle' is set
        if ('angle' not in params or
                params['angle'] is None):
            raise ValueError("Missing the required parameter `angle` when calling `products_id_badge_angle_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'angle' in params:
            path_params['angle'] = params['angle']  # noqa: E501

        query_params = []
        if 'variant' in params:
            query_params.append(('variant', params['variant']))  # noqa: E501
        if 'specific_date' in params:
            query_params.append(('specificDate', params['specific_date']))  # noqa: E501
        if 'in_sales' in params:
            query_params.append(('inSales', params['in_sales']))  # noqa: E501
        if 'mediatype' in params:
            query_params.append(('mediatype', params['mediatype']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/badge/{angle}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediaStoreAPIFeaturesProductsFeatureImageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_id_badge_angle_image_get(self, id, angle, **kwargs):  # noqa: E501
        """products_id_badge_angle_image_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_badge_angle_image_get(id, angle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str angle: (required)
        :param int variant:
        :param datetime specific_date:
        :param bool in_sales:
        :param bool original_only:
        :param str size:
        :param str mediatype:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_id_badge_angle_image_get_with_http_info(id, angle, **kwargs)  # noqa: E501
        else:
            (data) = self.products_id_badge_angle_image_get_with_http_info(id, angle, **kwargs)  # noqa: E501
            return data

    def products_id_badge_angle_image_get_with_http_info(self, id, angle, **kwargs):  # noqa: E501
        """products_id_badge_angle_image_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_badge_angle_image_get_with_http_info(id, angle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str angle: (required)
        :param int variant:
        :param datetime specific_date:
        :param bool in_sales:
        :param bool original_only:
        :param str size:
        :param str mediatype:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'angle', 'variant', 'specific_date', 'in_sales', 'original_only', 'size', 'mediatype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_id_badge_angle_image_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_id_badge_angle_image_get`")  # noqa: E501
        # verify the required parameter 'angle' is set
        if ('angle' not in params or
                params['angle'] is None):
            raise ValueError("Missing the required parameter `angle` when calling `products_id_badge_angle_image_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'angle' in params:
            path_params['angle'] = params['angle']  # noqa: E501

        query_params = []
        if 'variant' in params:
            query_params.append(('variant', params['variant']))  # noqa: E501
        if 'specific_date' in params:
            query_params.append(('specificDate', params['specific_date']))  # noqa: E501
        if 'in_sales' in params:
            query_params.append(('inSales', params['in_sales']))  # noqa: E501
        if 'original_only' in params:
            query_params.append(('originalOnly', params['original_only']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'mediatype' in params:
            query_params.append(('mediatype', params['mediatype']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/badge/{angle}/image', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_id_badge_get(self, id, **kwargs):  # noqa: E501
        """Gets a list of badge images for a given id (Method is not supported anymore)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_badge_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :return: MediaStoreAPIFeaturesProductsFeatureProductResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_id_badge_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_id_badge_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_id_badge_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets a list of badge images for a given id (Method is not supported anymore)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_badge_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :return: MediaStoreAPIFeaturesProductsFeatureProductResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_id_badge_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_id_badge_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/badge', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediaStoreAPIFeaturesProductsFeatureProductResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_id_badge_main_get(self, id, **kwargs):  # noqa: E501
        """Gets the metadata available for the main badge image (Method is not supported anymore)  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/main</code></p>  <p>For code examples and more details on implementation see                <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_badge_main_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :return: MediaStoreAPIFeaturesProductsFeatureImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_id_badge_main_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_id_badge_main_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_id_badge_main_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets the metadata available for the main badge image (Method is not supported anymore)  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/main</code></p>  <p>For code examples and more details on implementation see                <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_badge_main_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :return: MediaStoreAPIFeaturesProductsFeatureImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_id_badge_main_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_id_badge_main_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/badge/main', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediaStoreAPIFeaturesProductsFeatureImageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_id_badge_main_image_get(self, id, **kwargs):  # noqa: E501
        """Gets the binary file for the main badge image of a product (Method is not supported anymore)  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/main/image</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_badge_main_image_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :param str size: Valid sizes are: 100, 188, 376, 752, 2000, 2400, 3000, \"original\", \"originalJPG\" og \"originalPNG\". Default value: 752.               original is a .tif file with clipping path and without background.               originalJPG is with clipping path and with background.               originalPNG is without clipping path and without background.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_id_badge_main_image_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_id_badge_main_image_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_id_badge_main_image_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets the binary file for the main badge image of a product (Method is not supported anymore)  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/main/image</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_badge_main_image_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :param str size: Valid sizes are: 100, 188, 376, 752, 2000, 2400, 3000, \"original\", \"originalJPG\" og \"originalPNG\". Default value: 752.               original is a .tif file with clipping path and without background.               originalJPG is with clipping path and with background.               originalPNG is without clipping path and without background.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_id_badge_main_image_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_id_badge_main_image_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/badge/main/image', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_id_enriched_angle_get(self, id, angle, **kwargs):  # noqa: E501
        """Gets the metadata available for a single enriched image  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/{angle}</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_enriched_angle_get(id, angle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :param str angle: Valid angles: 1LX, 1CX, 1RX (required)
        :param int variant: Variant number. Default value: 0
        :param datetime specific_date: Return result as they would be on a specific date. Format: YYYY-MM-DD. Default value: today
        :param bool in_sales: Return products that are currently in sales only. Default value: false
        :param str mediatype: Valid types are A for image and G for graphic illustration. Default are all mediatypes.
        :return: MediaStoreAPIFeaturesProductsFeatureImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_id_enriched_angle_get_with_http_info(id, angle, **kwargs)  # noqa: E501
        else:
            (data) = self.products_id_enriched_angle_get_with_http_info(id, angle, **kwargs)  # noqa: E501
            return data

    def products_id_enriched_angle_get_with_http_info(self, id, angle, **kwargs):  # noqa: E501
        """Gets the metadata available for a single enriched image  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/{angle}</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_enriched_angle_get_with_http_info(id, angle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :param str angle: Valid angles: 1LX, 1CX, 1RX (required)
        :param int variant: Variant number. Default value: 0
        :param datetime specific_date: Return result as they would be on a specific date. Format: YYYY-MM-DD. Default value: today
        :param bool in_sales: Return products that are currently in sales only. Default value: false
        :param str mediatype: Valid types are A for image and G for graphic illustration. Default are all mediatypes.
        :return: MediaStoreAPIFeaturesProductsFeatureImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'angle', 'variant', 'specific_date', 'in_sales', 'mediatype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_id_enriched_angle_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_id_enriched_angle_get`")  # noqa: E501
        # verify the required parameter 'angle' is set
        if ('angle' not in params or
                params['angle'] is None):
            raise ValueError("Missing the required parameter `angle` when calling `products_id_enriched_angle_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'angle' in params:
            path_params['angle'] = params['angle']  # noqa: E501

        query_params = []
        if 'variant' in params:
            query_params.append(('variant', params['variant']))  # noqa: E501
        if 'specific_date' in params:
            query_params.append(('specificDate', params['specific_date']))  # noqa: E501
        if 'in_sales' in params:
            query_params.append(('inSales', params['in_sales']))  # noqa: E501
        if 'mediatype' in params:
            query_params.append(('mediatype', params['mediatype']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/enriched/{angle}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediaStoreAPIFeaturesProductsFeatureImageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_id_enriched_angle_image_get(self, id, angle, **kwargs):  # noqa: E501
        """Gets the binary file for a single enriched image  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/{angle}/image</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_enriched_angle_image_get(id, angle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :param str angle: Valid angles: 1LX, 1CX, 1RX (required)
        :param int variant: Variant number. Default value: 0
        :param datetime specific_date: Return result as they would be on a specific date. Format: YYYY-MM-DD. Default value: today
        :param bool in_sales: Return products that are currently in sales only. Default value: false
        :param bool original_only: Return original images only, ignore campaign images. Default value: false
        :param str size: Valid sizes are: 100, 188, 376, 752, 2000, 2400, 3000, \"original\", \"originalJPG\" og \"originalPNG\". Default value: 752.               original is a .tif file with clipping path and without background.               originalJPG is with clipping path and with background.               originalPNG is without clipping path and without background.
        :param str mediatype: Valid types are A for image and G for graphic illustration. Default are all mediatypes.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_id_enriched_angle_image_get_with_http_info(id, angle, **kwargs)  # noqa: E501
        else:
            (data) = self.products_id_enriched_angle_image_get_with_http_info(id, angle, **kwargs)  # noqa: E501
            return data

    def products_id_enriched_angle_image_get_with_http_info(self, id, angle, **kwargs):  # noqa: E501
        """Gets the binary file for a single enriched image  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/{angle}/image</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_enriched_angle_image_get_with_http_info(id, angle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :param str angle: Valid angles: 1LX, 1CX, 1RX (required)
        :param int variant: Variant number. Default value: 0
        :param datetime specific_date: Return result as they would be on a specific date. Format: YYYY-MM-DD. Default value: today
        :param bool in_sales: Return products that are currently in sales only. Default value: false
        :param bool original_only: Return original images only, ignore campaign images. Default value: false
        :param str size: Valid sizes are: 100, 188, 376, 752, 2000, 2400, 3000, \"original\", \"originalJPG\" og \"originalPNG\". Default value: 752.               original is a .tif file with clipping path and without background.               originalJPG is with clipping path and with background.               originalPNG is without clipping path and without background.
        :param str mediatype: Valid types are A for image and G for graphic illustration. Default are all mediatypes.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'angle', 'variant', 'specific_date', 'in_sales', 'original_only', 'size', 'mediatype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_id_enriched_angle_image_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_id_enriched_angle_image_get`")  # noqa: E501
        # verify the required parameter 'angle' is set
        if ('angle' not in params or
                params['angle'] is None):
            raise ValueError("Missing the required parameter `angle` when calling `products_id_enriched_angle_image_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'angle' in params:
            path_params['angle'] = params['angle']  # noqa: E501

        query_params = []
        if 'variant' in params:
            query_params.append(('variant', params['variant']))  # noqa: E501
        if 'specific_date' in params:
            query_params.append(('specificDate', params['specific_date']))  # noqa: E501
        if 'in_sales' in params:
            query_params.append(('inSales', params['in_sales']))  # noqa: E501
        if 'original_only' in params:
            query_params.append(('originalOnly', params['original_only']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'mediatype' in params:
            query_params.append(('mediatype', params['mediatype']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/enriched/{angle}/image', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_id_enriched_get(self, id, **kwargs):  # noqa: E501
        """Gets a list of enriched images for a given id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_enriched_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :return: MediaStoreAPIFeaturesProductsFeatureProductResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_id_enriched_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_id_enriched_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_id_enriched_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets a list of enriched images for a given id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_enriched_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :return: MediaStoreAPIFeaturesProductsFeatureProductResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_id_enriched_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_id_enriched_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/enriched', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediaStoreAPIFeaturesProductsFeatureProductResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_id_enriched_main_get(self, id, **kwargs):  # noqa: E501
        """Gets the metadata available for the main enriched image  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/main</code></p>  <p>For code examples and more details on implementation see                <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_enriched_main_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :return: MediaStoreAPIFeaturesProductsFeatureImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_id_enriched_main_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_id_enriched_main_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_id_enriched_main_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets the metadata available for the main enriched image  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/main</code></p>  <p>For code examples and more details on implementation see                <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_enriched_main_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :return: MediaStoreAPIFeaturesProductsFeatureImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_id_enriched_main_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_id_enriched_main_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/enriched/main', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediaStoreAPIFeaturesProductsFeatureImageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_id_enriched_main_image_get(self, id, **kwargs):  # noqa: E501
        """Gets the binary file for the main enriched image of a product  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/main/image</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_enriched_main_image_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :param str size: Valid sizes are: 100, 188, 376, 752, 2000, 2400, 3000, \"original\", \"originalJPG\" og \"originalPNG\". Default value: 752.               original is a .tif file with clipping path and without background.               originalJPG is with clipping path and with background.               originalPNG is without clipping path and without background.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_id_enriched_main_image_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_id_enriched_main_image_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_id_enriched_main_image_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets the binary file for the main enriched image of a product  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/main/image</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_enriched_main_image_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :param str size: Valid sizes are: 100, 188, 376, 752, 2000, 2400, 3000, \"original\", \"originalJPG\" og \"originalPNG\". Default value: 752.               original is a .tif file with clipping path and without background.               originalJPG is with clipping path and with background.               originalPNG is without clipping path and without background.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_id_enriched_main_image_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_id_enriched_main_image_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/enriched/main/image', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_id_foodservice_packaging_get(self, id, packaging, **kwargs):  # noqa: E501
        """Gets the metadata available for a servering single image  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/{angle}</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_foodservice_packaging_get(id, packaging, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :param str packaging: Valid packagings are 1, 0, B, C, G. (required)
        :param int packaging_variant: Packaging Variant. Default value: 0
        :param int variant: Variant number. Default value: 0
        :param datetime specific_date: Return result as they would be on a specific date. Format: YYYY-MM-DD. Default value: today
        :param bool in_sales: Return products that are currently in sales only. Default value: false
        :param bool original_only: Return original images only, ignore campaign images. Default value: false
        :param str mediatype: Valid types are A for image and G for graphic illustration. Default are all mediatypes.
        :return: MediaStoreAPIFeaturesProductsFeatureImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_id_foodservice_packaging_get_with_http_info(id, packaging, **kwargs)  # noqa: E501
        else:
            (data) = self.products_id_foodservice_packaging_get_with_http_info(id, packaging, **kwargs)  # noqa: E501
            return data

    def products_id_foodservice_packaging_get_with_http_info(self, id, packaging, **kwargs):  # noqa: E501
        """Gets the metadata available for a servering single image  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/{angle}</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_foodservice_packaging_get_with_http_info(id, packaging, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :param str packaging: Valid packagings are 1, 0, B, C, G. (required)
        :param int packaging_variant: Packaging Variant. Default value: 0
        :param int variant: Variant number. Default value: 0
        :param datetime specific_date: Return result as they would be on a specific date. Format: YYYY-MM-DD. Default value: today
        :param bool in_sales: Return products that are currently in sales only. Default value: false
        :param bool original_only: Return original images only, ignore campaign images. Default value: false
        :param str mediatype: Valid types are A for image and G for graphic illustration. Default are all mediatypes.
        :return: MediaStoreAPIFeaturesProductsFeatureImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'packaging', 'packaging_variant', 'variant', 'specific_date', 'in_sales', 'original_only', 'mediatype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_id_foodservice_packaging_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_id_foodservice_packaging_get`")  # noqa: E501
        # verify the required parameter 'packaging' is set
        if ('packaging' not in params or
                params['packaging'] is None):
            raise ValueError("Missing the required parameter `packaging` when calling `products_id_foodservice_packaging_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'packaging' in params:
            path_params['packaging'] = params['packaging']  # noqa: E501

        query_params = []
        if 'packaging_variant' in params:
            query_params.append(('packagingVariant', params['packaging_variant']))  # noqa: E501
        if 'variant' in params:
            query_params.append(('variant', params['variant']))  # noqa: E501
        if 'specific_date' in params:
            query_params.append(('specificDate', params['specific_date']))  # noqa: E501
        if 'in_sales' in params:
            query_params.append(('inSales', params['in_sales']))  # noqa: E501
        if 'original_only' in params:
            query_params.append(('originalOnly', params['original_only']))  # noqa: E501
        if 'mediatype' in params:
            query_params.append(('mediatype', params['mediatype']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/foodservice/{packaging}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediaStoreAPIFeaturesProductsFeatureImageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_id_foodservice_packaging_image_get(self, id, packaging, **kwargs):  # noqa: E501
        """Gets the binary file for a single servering image  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/{angle}/image</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_foodservice_packaging_image_get(id, packaging, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :param str packaging: Valid packagings are 1, 0, B, C, G. (required)
        :param int packaging_variant: Packaging Variant. Default value: 0
        :param int variant: Variant number. Default value: 0
        :param datetime specific_date: Return result as they would be on a specific date. Format: YYYY-MM-DD. Default value: today
        :param bool in_sales: Return products that are currently in sales only. Default value: false
        :param bool original_only: Return original images only, ignore campaign images. Default value: false
        :param str size: Valid sizes are: 100, 188, 376, 752, 2000, 2400, 3000, \"original\", \"originalJPG\" og \"originalPNG\". Default value: 752.                original is a .tif file with clipping path and without background.               originalJPG is with clipping path and with background.               originalPNG is without clipping path and without background.
        :param str mediatype: Valid types are A for image and G for graphic illustration. Default are all mediatypes.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_id_foodservice_packaging_image_get_with_http_info(id, packaging, **kwargs)  # noqa: E501
        else:
            (data) = self.products_id_foodservice_packaging_image_get_with_http_info(id, packaging, **kwargs)  # noqa: E501
            return data

    def products_id_foodservice_packaging_image_get_with_http_info(self, id, packaging, **kwargs):  # noqa: E501
        """Gets the binary file for a single servering image  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/{angle}/image</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_foodservice_packaging_image_get_with_http_info(id, packaging, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :param str packaging: Valid packagings are 1, 0, B, C, G. (required)
        :param int packaging_variant: Packaging Variant. Default value: 0
        :param int variant: Variant number. Default value: 0
        :param datetime specific_date: Return result as they would be on a specific date. Format: YYYY-MM-DD. Default value: today
        :param bool in_sales: Return products that are currently in sales only. Default value: false
        :param bool original_only: Return original images only, ignore campaign images. Default value: false
        :param str size: Valid sizes are: 100, 188, 376, 752, 2000, 2400, 3000, \"original\", \"originalJPG\" og \"originalPNG\". Default value: 752.                original is a .tif file with clipping path and without background.               originalJPG is with clipping path and with background.               originalPNG is without clipping path and without background.
        :param str mediatype: Valid types are A for image and G for graphic illustration. Default are all mediatypes.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'packaging', 'packaging_variant', 'variant', 'specific_date', 'in_sales', 'original_only', 'size', 'mediatype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_id_foodservice_packaging_image_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_id_foodservice_packaging_image_get`")  # noqa: E501
        # verify the required parameter 'packaging' is set
        if ('packaging' not in params or
                params['packaging'] is None):
            raise ValueError("Missing the required parameter `packaging` when calling `products_id_foodservice_packaging_image_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'packaging' in params:
            path_params['packaging'] = params['packaging']  # noqa: E501

        query_params = []
        if 'packaging_variant' in params:
            query_params.append(('packagingVariant', params['packaging_variant']))  # noqa: E501
        if 'variant' in params:
            query_params.append(('variant', params['variant']))  # noqa: E501
        if 'specific_date' in params:
            query_params.append(('specificDate', params['specific_date']))  # noqa: E501
        if 'in_sales' in params:
            query_params.append(('inSales', params['in_sales']))  # noqa: E501
        if 'original_only' in params:
            query_params.append(('originalOnly', params['original_only']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'mediatype' in params:
            query_params.append(('mediatype', params['mediatype']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/foodservice/{packaging}/image', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_id_get(self, id, **kwargs):  # noqa: E501
        """Gets a list of images for a given id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: GTIN (required)
        :return: MediaStoreAPIFeaturesProductsFeatureProductResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets a list of images for a given id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: GTIN (required)
        :return: MediaStoreAPIFeaturesProductsFeatureProductResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediaStoreAPIFeaturesProductsFeatureProductResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_id_main_get(self, id, **kwargs):  # noqa: E501
        """Gets the metadata available for the main image of a product  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/main</code></p>  <p>For code examples and more details on implementation see                <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_main_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :return: MediaStoreAPIFeaturesProductsFeatureImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_id_main_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_id_main_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_id_main_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets the metadata available for the main image of a product  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/main</code></p>  <p>For code examples and more details on implementation see                <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_main_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :return: MediaStoreAPIFeaturesProductsFeatureImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_id_main_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_id_main_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/main', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediaStoreAPIFeaturesProductsFeatureImageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_id_main_image_get(self, id, **kwargs):  # noqa: E501
        """Gets the binary file for the main image of a product  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/main/image</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_main_image_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :param str size: Valid sizes are: 100, 188, 376, 752, 2000, 2400, 3000, \"original\", \"originalJPG\" og \"originalPNG\". Default value: 752.                original is a .tif file with clipping path and without background.               originalJPG is with clipping path and with background.               originalPNG is without clipping path and without background.
        :param str internal_id: Internal id for fallback to generic store
        :param str product_group_id: Product group id for fallback to generic store
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_id_main_image_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_id_main_image_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_id_main_image_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets the binary file for the main image of a product  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/main/image</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_main_image_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :param str size: Valid sizes are: 100, 188, 376, 752, 2000, 2400, 3000, \"original\", \"originalJPG\" og \"originalPNG\". Default value: 752.                original is a .tif file with clipping path and without background.               originalJPG is with clipping path and with background.               originalPNG is without clipping path and without background.
        :param str internal_id: Internal id for fallback to generic store
        :param str product_group_id: Product group id for fallback to generic store
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'size', 'internal_id', 'product_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_id_main_image_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_id_main_image_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'internal_id' in params:
            query_params.append(('internalId', params['internal_id']))  # noqa: E501
        if 'product_group_id' in params:
            query_params.append(('productGroupId', params['product_group_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/main/image', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_id_recommended_get(self, id, **kwargs):  # noqa: E501
        """Gets the metadata available for the suppliers recommended image of a product. If no recommended image is set on the product, then the main image on the product will be delivered  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/main</code></p>  <p>For code examples and more details on implementation see                <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_recommended_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :return: MediaStoreAPIFeaturesProductsFeatureImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_id_recommended_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_id_recommended_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_id_recommended_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets the metadata available for the suppliers recommended image of a product. If no recommended image is set on the product, then the main image on the product will be delivered  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/main</code></p>  <p>For code examples and more details on implementation see                <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_recommended_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :return: MediaStoreAPIFeaturesProductsFeatureImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_id_recommended_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_id_recommended_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/recommended', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediaStoreAPIFeaturesProductsFeatureImageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_id_recommended_image_get(self, id, **kwargs):  # noqa: E501
        """Gets the binary file for the suppliers recommended image of a product. If no recommended image is set on the product, then the main image on the product will be delivered  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/main/image</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_recommended_image_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :param str size: Valid sizes are: 100, 188, 376, 752, 2000, 2400, 3000, \"original\", \"originalJPG\" og \"originalPNG\". Default value: 752.                original is a .tif file with clipping path and without background.               originalJPG is with clipping path and with background.               originalPNG is without clipping path and without background.
        :param str internal_id: Internal id for fallback to generic store
        :param str product_group_id: Product group id for fallback to generic store
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_id_recommended_image_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_id_recommended_image_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_id_recommended_image_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets the binary file for the suppliers recommended image of a product. If no recommended image is set on the product, then the main image on the product will be delivered  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/main/image</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_recommended_image_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :param str size: Valid sizes are: 100, 188, 376, 752, 2000, 2400, 3000, \"original\", \"originalJPG\" og \"originalPNG\". Default value: 752.                original is a .tif file with clipping path and without background.               originalJPG is with clipping path and with background.               originalPNG is without clipping path and without background.
        :param str internal_id: Internal id for fallback to generic store
        :param str product_group_id: Product group id for fallback to generic store
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'size', 'internal_id', 'product_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_id_recommended_image_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_id_recommended_image_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'internal_id' in params:
            query_params.append(('internalId', params['internal_id']))  # noqa: E501
        if 'product_group_id' in params:
            query_params.append(('productGroupId', params['product_group_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/recommended/image', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_id_space_angle_get(self, id, angle, **kwargs):  # noqa: E501
        """Gets the metadata available for a single image in space format  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/space/{angle}</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_space_angle_get(id, angle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :param str angle: Valid space angles: 1N, 2N, 3N (required)
        :param int variant: Variant number. Default value: 0
        :param datetime specific_date: Return result as they would be on a specific date. Format: YYYY-MM-DD. Default value: today
        :param bool in_sales: Return products that are currently in sales only. Default value: false
        :param str mediatype: Valid types are A for image and G for graphic illustration. Default are all mediatypes.
        :return: MediaStoreAPIFeaturesProductsFeatureImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_id_space_angle_get_with_http_info(id, angle, **kwargs)  # noqa: E501
        else:
            (data) = self.products_id_space_angle_get_with_http_info(id, angle, **kwargs)  # noqa: E501
            return data

    def products_id_space_angle_get_with_http_info(self, id, angle, **kwargs):  # noqa: E501
        """Gets the metadata available for a single image in space format  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/space/{angle}</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_space_angle_get_with_http_info(id, angle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :param str angle: Valid space angles: 1N, 2N, 3N (required)
        :param int variant: Variant number. Default value: 0
        :param datetime specific_date: Return result as they would be on a specific date. Format: YYYY-MM-DD. Default value: today
        :param bool in_sales: Return products that are currently in sales only. Default value: false
        :param str mediatype: Valid types are A for image and G for graphic illustration. Default are all mediatypes.
        :return: MediaStoreAPIFeaturesProductsFeatureImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'angle', 'variant', 'specific_date', 'in_sales', 'mediatype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_id_space_angle_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_id_space_angle_get`")  # noqa: E501
        # verify the required parameter 'angle' is set
        if ('angle' not in params or
                params['angle'] is None):
            raise ValueError("Missing the required parameter `angle` when calling `products_id_space_angle_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'angle' in params:
            path_params['angle'] = params['angle']  # noqa: E501

        query_params = []
        if 'variant' in params:
            query_params.append(('variant', params['variant']))  # noqa: E501
        if 'specific_date' in params:
            query_params.append(('specificDate', params['specific_date']))  # noqa: E501
        if 'in_sales' in params:
            query_params.append(('inSales', params['in_sales']))  # noqa: E501
        if 'mediatype' in params:
            query_params.append(('mediatype', params['mediatype']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/space/{angle}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediaStoreAPIFeaturesProductsFeatureImageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_id_space_angle_image_get(self, id, angle, **kwargs):  # noqa: E501
        """Gets the binary file for an image in space format  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/space/{angle}/image</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_space_angle_image_get(id, angle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :param str angle: Valid space angles: 1N, 2N, 3N (required)
        :param int variant: Variant number. Default value: 0
        :param datetime specific_date: Return result as they would be on a specific date. Format: YYYY-MM-DD. Default value: today
        :param bool in_sales: Return products that are currently in sales only. Default value: false
        :param str mediatype: Valid types are A for image and G for graphic illustration. Default are all mediatypes.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_id_space_angle_image_get_with_http_info(id, angle, **kwargs)  # noqa: E501
        else:
            (data) = self.products_id_space_angle_image_get_with_http_info(id, angle, **kwargs)  # noqa: E501
            return data

    def products_id_space_angle_image_get_with_http_info(self, id, angle, **kwargs):  # noqa: E501
        """Gets the binary file for an image in space format  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/space/{angle}/image</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_space_angle_image_get_with_http_info(id, angle, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :param str angle: Valid space angles: 1N, 2N, 3N (required)
        :param int variant: Variant number. Default value: 0
        :param datetime specific_date: Return result as they would be on a specific date. Format: YYYY-MM-DD. Default value: today
        :param bool in_sales: Return products that are currently in sales only. Default value: false
        :param str mediatype: Valid types are A for image and G for graphic illustration. Default are all mediatypes.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'angle', 'variant', 'specific_date', 'in_sales', 'mediatype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_id_space_angle_image_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_id_space_angle_image_get`")  # noqa: E501
        # verify the required parameter 'angle' is set
        if ('angle' not in params or
                params['angle'] is None):
            raise ValueError("Missing the required parameter `angle` when calling `products_id_space_angle_image_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'angle' in params:
            path_params['angle'] = params['angle']  # noqa: E501

        query_params = []
        if 'variant' in params:
            query_params.append(('variant', params['variant']))  # noqa: E501
        if 'specific_date' in params:
            query_params.append(('specificDate', params['specific_date']))  # noqa: E501
        if 'in_sales' in params:
            query_params.append(('inSales', params['in_sales']))  # noqa: E501
        if 'mediatype' in params:
            query_params.append(('mediatype', params['mediatype']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/space/{angle}/image', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_id_space_get(self, id, **kwargs):  # noqa: E501
        """Gets the list of the images avaliable in space format for a given id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_space_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :return: MediaStoreAPIFeaturesProductsFeatureProductResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_id_space_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_id_space_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_id_space_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets the list of the images avaliable in space format for a given id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_space_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :return: MediaStoreAPIFeaturesProductsFeatureProductResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_id_space_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_id_space_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/space', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediaStoreAPIFeaturesProductsFeatureProductResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_id_space_main_get(self, id, **kwargs):  # noqa: E501
        """Gets the metadata available for the main image of a product in space format  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/space/main</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_space_main_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :return: MediaStoreAPIFeaturesProductsFeatureImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_id_space_main_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_id_space_main_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_id_space_main_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets the metadata available for the main image of a product in space format  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/space/main</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_space_main_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :return: MediaStoreAPIFeaturesProductsFeatureImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_id_space_main_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_id_space_main_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/space/main', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediaStoreAPIFeaturesProductsFeatureImageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_id_space_main_image_get(self, id, **kwargs):  # noqa: E501
        """Gets the binary file for the main image of a product in space format  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/space/main/image</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_space_main_image_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_id_space_main_image_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.products_id_space_main_image_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def products_id_space_main_image_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets the binary file for the main image of a product in space format  # noqa: E501

        <p>For the CDN version of all calls, you need to first request a CDN token (See /products/gettoken) and a userHash (See /products/getUserHash)                and the URL Host needs to be https://tradesolutions.akamaized.net/api/.               The CDN operation URL looks similar to the normal API version of the operation with the exception of a hash being added to the URL.                The response object of all standard API calls returns an attribute called \"CDNUrl\" which exposes the CDN version of the call (provided that               the user has CDN access).                               The request will also need to include a few request headers; Cache-control with the value no-cache, the CDN token; \"__token__\" (from /products/gettoken), and a host header; host (with the value tradesolutions.akamaized.net).</p>  <p>CDNUrl example: <code>/products/kjlsdf231lkjdagfdfg/{id}/space/main/image</code></p>  <p>For code examples and more details on implementation see <a href=\"http://www.tradesolution.no/wp-content/uploads/2017/01/Implementation-examples-Mediastore-API-and-CDN-okt-2016.pdf\">usage examples</a>.</p>  <p></p>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_id_space_main_image_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: GTIN (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_id_space_main_image_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `products_id_space_main_image_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{id}/space/main/image', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_imageset_id_valid_from_valid_to_post(self, imageset_id, valid_from, valid_to, **kwargs):  # noqa: E501
        """Change the from and to date for an imageset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_imageset_id_valid_from_valid_to_post(imageset_id, valid_from, valid_to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int imageset_id: (required)
        :param datetime valid_from: (required)
        :param datetime valid_to: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_imageset_id_valid_from_valid_to_post_with_http_info(imageset_id, valid_from, valid_to, **kwargs)  # noqa: E501
        else:
            (data) = self.products_imageset_id_valid_from_valid_to_post_with_http_info(imageset_id, valid_from, valid_to, **kwargs)  # noqa: E501
            return data

    def products_imageset_id_valid_from_valid_to_post_with_http_info(self, imageset_id, valid_from, valid_to, **kwargs):  # noqa: E501
        """Change the from and to date for an imageset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_imageset_id_valid_from_valid_to_post_with_http_info(imageset_id, valid_from, valid_to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int imageset_id: (required)
        :param datetime valid_from: (required)
        :param datetime valid_to: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['imageset_id', 'valid_from', 'valid_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_imageset_id_valid_from_valid_to_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'imageset_id' is set
        if ('imageset_id' not in params or
                params['imageset_id'] is None):
            raise ValueError("Missing the required parameter `imageset_id` when calling `products_imageset_id_valid_from_valid_to_post`")  # noqa: E501
        # verify the required parameter 'valid_from' is set
        if ('valid_from' not in params or
                params['valid_from'] is None):
            raise ValueError("Missing the required parameter `valid_from` when calling `products_imageset_id_valid_from_valid_to_post`")  # noqa: E501
        # verify the required parameter 'valid_to' is set
        if ('valid_to' not in params or
                params['valid_to'] is None):
            raise ValueError("Missing the required parameter `valid_to` when calling `products_imageset_id_valid_from_valid_to_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'imageset_id' in params:
            path_params['imagesetID'] = params['imageset_id']  # noqa: E501
        if 'valid_from' in params:
            path_params['validFrom'] = params['valid_from']  # noqa: E501
        if 'valid_to' in params:
            path_params['validTo'] = params['valid_to']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/{imagesetID}/{validFrom}/{validTo}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def products_modified_get(self, **kwargs):  # noqa: E501
        """Gets a list of products that has been modified between two given dates. Both dates are inclusive.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_modified_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _from: Format: YYYY-MM-DD. Default value: today
        :param datetime to: Format: YYYY-MM-DD. Default value: today
        :return: MediaStoreAPIFeaturesProductsFeatureSearchResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.products_modified_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.products_modified_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def products_modified_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets a list of products that has been modified between two given dates. Both dates are inclusive.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.products_modified_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _from: Format: YYYY-MM-DD. Default value: today
        :param datetime to: Format: YYYY-MM-DD. Default value: today
        :return: MediaStoreAPIFeaturesProductsFeatureSearchResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method products_modified_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/products/modified', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediaStoreAPIFeaturesProductsFeatureSearchResultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
