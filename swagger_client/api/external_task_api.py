# coding: utf-8

"""
    MediaStore API

    MediaStore API for MediaStore  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ExternalTaskApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def external_task_get_image_medie_id_get(self, medie_id, **kwargs):  # noqa: E501
        """external_task_get_image_medie_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.external_task_get_image_medie_id_get(medie_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int medie_id: (required)
        :return: MediaStoreAPIFeaturesExternalTaskFeatureExternalTaskDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.external_task_get_image_medie_id_get_with_http_info(medie_id, **kwargs)  # noqa: E501
        else:
            (data) = self.external_task_get_image_medie_id_get_with_http_info(medie_id, **kwargs)  # noqa: E501
            return data

    def external_task_get_image_medie_id_get_with_http_info(self, medie_id, **kwargs):  # noqa: E501
        """external_task_get_image_medie_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.external_task_get_image_medie_id_get_with_http_info(medie_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int medie_id: (required)
        :return: MediaStoreAPIFeaturesExternalTaskFeatureExternalTaskDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['medie_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method external_task_get_image_medie_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'medie_id' is set
        if ('medie_id' not in params or
                params['medie_id'] is None):
            raise ValueError("Missing the required parameter `medie_id` when calling `external_task_get_image_medie_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'medie_id' in params:
            path_params['medieID'] = params['medie_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ExternalTask/getImage/{medieID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediaStoreAPIFeaturesExternalTaskFeatureExternalTaskDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def external_task_get_images_get(self, **kwargs):  # noqa: E501
        """external_task_get_images_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.external_task_get_images_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[MediaStoreAPIFeaturesExternalTaskFeatureExternalTaskDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.external_task_get_images_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.external_task_get_images_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def external_task_get_images_get_with_http_info(self, **kwargs):  # noqa: E501
        """external_task_get_images_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.external_task_get_images_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[MediaStoreAPIFeaturesExternalTaskFeatureExternalTaskDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method external_task_get_images_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ExternalTask/getImages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MediaStoreAPIFeaturesExternalTaskFeatureExternalTaskDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def external_task_get_images_order_number_get(self, order_number, **kwargs):  # noqa: E501
        """external_task_get_images_order_number_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.external_task_get_images_order_number_get(order_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_number: (required)
        :return: list[MediaStoreAPIFeaturesExternalTaskFeatureExternalTaskDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.external_task_get_images_order_number_get_with_http_info(order_number, **kwargs)  # noqa: E501
        else:
            (data) = self.external_task_get_images_order_number_get_with_http_info(order_number, **kwargs)  # noqa: E501
            return data

    def external_task_get_images_order_number_get_with_http_info(self, order_number, **kwargs):  # noqa: E501
        """external_task_get_images_order_number_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.external_task_get_images_order_number_get_with_http_info(order_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_number: (required)
        :return: list[MediaStoreAPIFeaturesExternalTaskFeatureExternalTaskDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method external_task_get_images_order_number_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_number' is set
        if ('order_number' not in params or
                params['order_number'] is None):
            raise ValueError("Missing the required parameter `order_number` when calling `external_task_get_images_order_number_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_number' in params:
            path_params['orderNumber'] = params['order_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ExternalTask/getImages/{orderNumber}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MediaStoreAPIFeaturesExternalTaskFeatureExternalTaskDto]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def external_task_images_fetched_post(self, **kwargs):  # noqa: E501
        """external_task_images_fetched_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.external_task_images_fetched_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.external_task_images_fetched_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.external_task_images_fetched_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def external_task_images_fetched_post_with_http_info(self, **kwargs):  # noqa: E501
        """external_task_images_fetched_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.external_task_images_fetched_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method external_task_images_fetched_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ExternalTask/imagesFetched', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def external_task_order_complete_order_number_post(self, order_number, **kwargs):  # noqa: E501
        """external_task_order_complete_order_number_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.external_task_order_complete_order_number_post(order_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_number: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.external_task_order_complete_order_number_post_with_http_info(order_number, **kwargs)  # noqa: E501
        else:
            (data) = self.external_task_order_complete_order_number_post_with_http_info(order_number, **kwargs)  # noqa: E501
            return data

    def external_task_order_complete_order_number_post_with_http_info(self, order_number, **kwargs):  # noqa: E501
        """external_task_order_complete_order_number_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.external_task_order_complete_order_number_post_with_http_info(order_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int order_number: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method external_task_order_complete_order_number_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_number' is set
        if ('order_number' not in params or
                params['order_number'] is None):
            raise ValueError("Missing the required parameter `order_number` when calling `external_task_order_complete_order_number_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_number' in params:
            path_params['orderNumber'] = params['order_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/ExternalTask/orderComplete/{orderNumber}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
