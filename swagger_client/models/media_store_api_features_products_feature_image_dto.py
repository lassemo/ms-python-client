# coding: utf-8

"""
    MediaStore API

    MediaStore API for MediaStore  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MediaStoreAPIFeaturesProductsFeatureImageDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'image_set_id': 'int',
        'angle': 'str',
        'is_main_image': 'bool',
        'original_file_name': 'str',
        'available_from': 'datetime',
        'available_to': 'datetime',
        'date_taken': 'datetime',
        'media_store_url': 'str',
        'media_type': 'str',
        'packaging': 'str',
        'product_image_type': 'int',
        'variant': 'int',
        'sales_date': 'datetime',
        'campaign_start_date': 'datetime',
        'campaign_end_date': 'datetime',
        'url': 'str',
        'cdn_url': 'str',
        'is_from_private_store': 'bool',
        'updated_at': 'datetime',
        'uploaded_by': 'str',
        'is_deleted': 'bool',
        'is_temporary': 'bool'
    }

    attribute_map = {
        'image_set_id': 'imageSetID',
        'angle': 'angle',
        'is_main_image': 'isMainImage',
        'original_file_name': 'originalFileName',
        'available_from': 'availableFrom',
        'available_to': 'availableTo',
        'date_taken': 'dateTaken',
        'media_store_url': 'mediaStoreUrl',
        'media_type': 'mediaType',
        'packaging': 'packaging',
        'product_image_type': 'productImageType',
        'variant': 'variant',
        'sales_date': 'salesDate',
        'campaign_start_date': 'campaignStartDate',
        'campaign_end_date': 'campaignEndDate',
        'url': 'url',
        'cdn_url': 'cdnUrl',
        'is_from_private_store': 'isFromPrivateStore',
        'updated_at': 'updatedAt',
        'uploaded_by': 'uploadedBy',
        'is_deleted': 'isDeleted',
        'is_temporary': 'isTemporary'
    }

    def __init__(self, image_set_id=None, angle=None, is_main_image=None, original_file_name=None, available_from=None, available_to=None, date_taken=None, media_store_url=None, media_type=None, packaging=None, product_image_type=None, variant=None, sales_date=None, campaign_start_date=None, campaign_end_date=None, url=None, cdn_url=None, is_from_private_store=None, updated_at=None, uploaded_by=None, is_deleted=None, is_temporary=None):  # noqa: E501
        """MediaStoreAPIFeaturesProductsFeatureImageDto - a model defined in Swagger"""  # noqa: E501
        self._image_set_id = None
        self._angle = None
        self._is_main_image = None
        self._original_file_name = None
        self._available_from = None
        self._available_to = None
        self._date_taken = None
        self._media_store_url = None
        self._media_type = None
        self._packaging = None
        self._product_image_type = None
        self._variant = None
        self._sales_date = None
        self._campaign_start_date = None
        self._campaign_end_date = None
        self._url = None
        self._cdn_url = None
        self._is_from_private_store = None
        self._updated_at = None
        self._uploaded_by = None
        self._is_deleted = None
        self._is_temporary = None
        self.discriminator = None
        if image_set_id is not None:
            self.image_set_id = image_set_id
        if angle is not None:
            self.angle = angle
        if is_main_image is not None:
            self.is_main_image = is_main_image
        if original_file_name is not None:
            self.original_file_name = original_file_name
        if available_from is not None:
            self.available_from = available_from
        if available_to is not None:
            self.available_to = available_to
        if date_taken is not None:
            self.date_taken = date_taken
        if media_store_url is not None:
            self.media_store_url = media_store_url
        if media_type is not None:
            self.media_type = media_type
        if packaging is not None:
            self.packaging = packaging
        if product_image_type is not None:
            self.product_image_type = product_image_type
        if variant is not None:
            self.variant = variant
        if sales_date is not None:
            self.sales_date = sales_date
        if campaign_start_date is not None:
            self.campaign_start_date = campaign_start_date
        if campaign_end_date is not None:
            self.campaign_end_date = campaign_end_date
        if url is not None:
            self.url = url
        if cdn_url is not None:
            self.cdn_url = cdn_url
        if is_from_private_store is not None:
            self.is_from_private_store = is_from_private_store
        if updated_at is not None:
            self.updated_at = updated_at
        if uploaded_by is not None:
            self.uploaded_by = uploaded_by
        if is_deleted is not None:
            self.is_deleted = is_deleted
        if is_temporary is not None:
            self.is_temporary = is_temporary

    @property
    def image_set_id(self):
        """Gets the image_set_id of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501

        A unique id for the imageset  # noqa: E501

        :return: The image_set_id of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :rtype: int
        """
        return self._image_set_id

    @image_set_id.setter
    def image_set_id(self, image_set_id):
        """Sets the image_set_id of this MediaStoreAPIFeaturesProductsFeatureImageDto.

        A unique id for the imageset  # noqa: E501

        :param image_set_id: The image_set_id of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :type: int
        """

        self._image_set_id = image_set_id

    @property
    def angle(self):
        """Gets the angle of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501

        Image angle,  # noqa: E501

        :return: The angle of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :rtype: str
        """
        return self._angle

    @angle.setter
    def angle(self, angle):
        """Sets the angle of this MediaStoreAPIFeaturesProductsFeatureImageDto.

        Image angle,  # noqa: E501

        :param angle: The angle of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :type: str
        """

        self._angle = angle

    @property
    def is_main_image(self):
        """Gets the is_main_image of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501

        Whether this is the main image for the GTIN or not.  # noqa: E501

        :return: The is_main_image of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_main_image

    @is_main_image.setter
    def is_main_image(self, is_main_image):
        """Sets the is_main_image of this MediaStoreAPIFeaturesProductsFeatureImageDto.

        Whether this is the main image for the GTIN or not.  # noqa: E501

        :param is_main_image: The is_main_image of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :type: bool
        """

        self._is_main_image = is_main_image

    @property
    def original_file_name(self):
        """Gets the original_file_name of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501

        File name of the original file.  # noqa: E501

        :return: The original_file_name of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :rtype: str
        """
        return self._original_file_name

    @original_file_name.setter
    def original_file_name(self, original_file_name):
        """Sets the original_file_name of this MediaStoreAPIFeaturesProductsFeatureImageDto.

        File name of the original file.  # noqa: E501

        :param original_file_name: The original_file_name of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :type: str
        """

        self._original_file_name = original_file_name

    @property
    def available_from(self):
        """Gets the available_from of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501

        Gets or sets the available from.  # noqa: E501

        :return: The available_from of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :rtype: datetime
        """
        return self._available_from

    @available_from.setter
    def available_from(self, available_from):
        """Sets the available_from of this MediaStoreAPIFeaturesProductsFeatureImageDto.

        Gets or sets the available from.  # noqa: E501

        :param available_from: The available_from of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :type: datetime
        """

        self._available_from = available_from

    @property
    def available_to(self):
        """Gets the available_to of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501

        Gets or sets the available to.  # noqa: E501

        :return: The available_to of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :rtype: datetime
        """
        return self._available_to

    @available_to.setter
    def available_to(self, available_to):
        """Sets the available_to of this MediaStoreAPIFeaturesProductsFeatureImageDto.

        Gets or sets the available to.  # noqa: E501

        :param available_to: The available_to of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :type: datetime
        """

        self._available_to = available_to

    @property
    def date_taken(self):
        """Gets the date_taken of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501

        The date this image was taken.  # noqa: E501

        :return: The date_taken of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :rtype: datetime
        """
        return self._date_taken

    @date_taken.setter
    def date_taken(self, date_taken):
        """Sets the date_taken of this MediaStoreAPIFeaturesProductsFeatureImageDto.

        The date this image was taken.  # noqa: E501

        :param date_taken: The date_taken of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :type: datetime
        """

        self._date_taken = date_taken

    @property
    def media_store_url(self):
        """Gets the media_store_url of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501

        URL to image in Media store  # noqa: E501

        :return: The media_store_url of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :rtype: str
        """
        return self._media_store_url

    @media_store_url.setter
    def media_store_url(self, media_store_url):
        """Sets the media_store_url of this MediaStoreAPIFeaturesProductsFeatureImageDto.

        URL to image in Media store  # noqa: E501

        :param media_store_url: The media_store_url of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :type: str
        """

        self._media_store_url = media_store_url

    @property
    def media_type(self):
        """Gets the media_type of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501

        Gets or sets the type of the media.  # noqa: E501

        :return: The media_type of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this MediaStoreAPIFeaturesProductsFeatureImageDto.

        Gets or sets the type of the media.  # noqa: E501

        :param media_type: The media_type of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :type: str
        """

        self._media_type = media_type

    @property
    def packaging(self):
        """Gets the packaging of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501

        Gets or sets the packaging.  # noqa: E501

        :return: The packaging of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :rtype: str
        """
        return self._packaging

    @packaging.setter
    def packaging(self, packaging):
        """Sets the packaging of this MediaStoreAPIFeaturesProductsFeatureImageDto.

        Gets or sets the packaging.  # noqa: E501

        :param packaging: The packaging of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :type: str
        """

        self._packaging = packaging

    @property
    def product_image_type(self):
        """Gets the product_image_type of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501

        Gets or sets the type of the product image.  Standard image, campaign image, variant  # noqa: E501

        :return: The product_image_type of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :rtype: int
        """
        return self._product_image_type

    @product_image_type.setter
    def product_image_type(self, product_image_type):
        """Sets the product_image_type of this MediaStoreAPIFeaturesProductsFeatureImageDto.

        Gets or sets the type of the product image.  Standard image, campaign image, variant  # noqa: E501

        :param product_image_type: The product_image_type of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :type: int
        """

        self._product_image_type = product_image_type

    @property
    def variant(self):
        """Gets the variant of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501


        :return: The variant of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :rtype: int
        """
        return self._variant

    @variant.setter
    def variant(self, variant):
        """Sets the variant of this MediaStoreAPIFeaturesProductsFeatureImageDto.


        :param variant: The variant of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :type: int
        """

        self._variant = variant

    @property
    def sales_date(self):
        """Gets the sales_date of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501

        Gets or sets the sales date.  # noqa: E501

        :return: The sales_date of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :rtype: datetime
        """
        return self._sales_date

    @sales_date.setter
    def sales_date(self, sales_date):
        """Sets the sales_date of this MediaStoreAPIFeaturesProductsFeatureImageDto.

        Gets or sets the sales date.  # noqa: E501

        :param sales_date: The sales_date of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :type: datetime
        """

        self._sales_date = sales_date

    @property
    def campaign_start_date(self):
        """Gets the campaign_start_date of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501


        :return: The campaign_start_date of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :rtype: datetime
        """
        return self._campaign_start_date

    @campaign_start_date.setter
    def campaign_start_date(self, campaign_start_date):
        """Sets the campaign_start_date of this MediaStoreAPIFeaturesProductsFeatureImageDto.


        :param campaign_start_date: The campaign_start_date of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :type: datetime
        """

        self._campaign_start_date = campaign_start_date

    @property
    def campaign_end_date(self):
        """Gets the campaign_end_date of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501


        :return: The campaign_end_date of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :rtype: datetime
        """
        return self._campaign_end_date

    @campaign_end_date.setter
    def campaign_end_date(self, campaign_end_date):
        """Sets the campaign_end_date of this MediaStoreAPIFeaturesProductsFeatureImageDto.


        :param campaign_end_date: The campaign_end_date of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :type: datetime
        """

        self._campaign_end_date = campaign_end_date

    @property
    def url(self):
        """Gets the url of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501

        URL to binary file for this image.  # noqa: E501

        :return: The url of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this MediaStoreAPIFeaturesProductsFeatureImageDto.

        URL to binary file for this image.  # noqa: E501

        :param url: The url of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def cdn_url(self):
        """Gets the cdn_url of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501

        URL to binary file for this image.  # noqa: E501

        :return: The cdn_url of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :rtype: str
        """
        return self._cdn_url

    @cdn_url.setter
    def cdn_url(self, cdn_url):
        """Sets the cdn_url of this MediaStoreAPIFeaturesProductsFeatureImageDto.

        URL to binary file for this image.  # noqa: E501

        :param cdn_url: The cdn_url of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :type: str
        """

        self._cdn_url = cdn_url

    @property
    def is_from_private_store(self):
        """Gets the is_from_private_store of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501

        Whether this image is from the private store.  # noqa: E501

        :return: The is_from_private_store of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_from_private_store

    @is_from_private_store.setter
    def is_from_private_store(self, is_from_private_store):
        """Sets the is_from_private_store of this MediaStoreAPIFeaturesProductsFeatureImageDto.

        Whether this image is from the private store.  # noqa: E501

        :param is_from_private_store: The is_from_private_store of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :type: bool
        """

        self._is_from_private_store = is_from_private_store

    @property
    def updated_at(self):
        """Gets the updated_at of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501

        Time of last change to metadata or image data.  # noqa: E501

        :return: The updated_at of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MediaStoreAPIFeaturesProductsFeatureImageDto.

        Time of last change to metadata or image data.  # noqa: E501

        :param updated_at: The updated_at of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def uploaded_by(self):
        """Gets the uploaded_by of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501

        The e-mail address of the user how uploaded the image.  # noqa: E501

        :return: The uploaded_by of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :rtype: str
        """
        return self._uploaded_by

    @uploaded_by.setter
    def uploaded_by(self, uploaded_by):
        """Sets the uploaded_by of this MediaStoreAPIFeaturesProductsFeatureImageDto.

        The e-mail address of the user how uploaded the image.  # noqa: E501

        :param uploaded_by: The uploaded_by of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :type: str
        """

        self._uploaded_by = uploaded_by

    @property
    def is_deleted(self):
        """Gets the is_deleted of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501


        :return: The is_deleted of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this MediaStoreAPIFeaturesProductsFeatureImageDto.


        :param is_deleted: The is_deleted of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :type: bool
        """

        self._is_deleted = is_deleted

    @property
    def is_temporary(self):
        """Gets the is_temporary of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501

        Whether this image is temporary  # noqa: E501

        :return: The is_temporary of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_temporary

    @is_temporary.setter
    def is_temporary(self, is_temporary):
        """Sets the is_temporary of this MediaStoreAPIFeaturesProductsFeatureImageDto.

        Whether this image is temporary  # noqa: E501

        :param is_temporary: The is_temporary of this MediaStoreAPIFeaturesProductsFeatureImageDto.  # noqa: E501
        :type: bool
        """

        self._is_temporary = is_temporary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MediaStoreAPIFeaturesProductsFeatureImageDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MediaStoreAPIFeaturesProductsFeatureImageDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
